{"version":3,"sources":["actions/types.js","components/Posts.js","actions/postActions.js","components/Postform.js","reducers/postReducer.js","reducers/index.js","store.js","App.js","reportWebVitals.js","index.js"],"names":["FETCH_POSTS","NEW_POST","Posts","this","props","fetchPosts","nextProps","newPost","posts","unshift","postItems","map","post","title","body","id","Component","connect","state","items","item","dispatch","fetch","then","res","json","type","payload","PostForm","onChange","bind","onSubmit","e","setState","target","name","value","preventDefault","createPost","postData","method","headers","JSON","stringify","initialState","combineReducers","action","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c12dfbc1.chunk.js","sourcesContent":["export const FETCH_POSTS = \"FETCH_POSTS\";\r\nexport const NEW_POST = \"NEW_POST\";\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { fetchPosts } from \"../actions/postActions\";\r\n\r\nclass Posts extends Component {\r\n  componentWillMount() {\r\n    this.props.fetchPosts();\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    if (nextProps.newPost) {\r\n      this.props.posts.unshift(nextProps.newPost);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const postItems = this.props.posts.map((post) => (\r\n      <div key={post.id}>\r\n        <h3>{post.title}</h3>\r\n        <p>{post.body}</p>\r\n      </div>\r\n    ));\r\n    return (\r\n      <div>\r\n        <h1>Posts</h1>\r\n        {postItems}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nPosts.propTypes = {\r\n  fetchPosts: PropTypes.func.isRequired,\r\n  posts: PropTypes.array.isRequired,\r\n  newPost: PropTypes.object,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  posts: state.posts.items,\r\n  newPost: state.posts.item,\r\n});\r\n\r\nexport default connect(mapStateToProps, { fetchPosts })(Posts);\r\n","import { FETCH_POSTS, NEW_POST } from \"./types\";\r\n\r\nexport const fetchPosts = () => (dispatch) => {\r\n  fetch(\"https://jsonplaceholder.typicode.com/posts\")\r\n    .then((res) => res.json())\r\n    .then((posts) =>\r\n      dispatch({\r\n        type: FETCH_POSTS,\r\n        payload: posts,\r\n      })\r\n    );\r\n};\r\n\r\nexport const createPost = (postData) => (dispatch) => {\r\n  fetch(\"https://jsonplaceholder.typicode.com/posts\", {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"content-type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify(postData),\r\n  })\r\n    .then((res) => res.json())\r\n    .then((post) =>\r\n      dispatch({\r\n        type: NEW_POST,\r\n        payload: post,\r\n      })\r\n    );\r\n};\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { createPost } from \"../actions/postActions\";\r\n\r\nclass PostForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      title: \"\",\r\n      body: \"\",\r\n    };\r\n\r\n    this.onChange = this.onChange.bind(this);\r\n    this.onSubmit = this.onSubmit.bind(this);\r\n  }\r\n\r\n  onChange(e) {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  }\r\n\r\n  onSubmit(e) {\r\n    e.preventDefault();\r\n\r\n    const post = {\r\n      title: this.state.title,\r\n      body: this.state.body,\r\n    };\r\n\r\n    this.props.createPost(post);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Add Post</h1>\r\n        <form onSubmit={this.onSubmit}>\r\n          <div>\r\n            <label>Title: </label>\r\n            <br />\r\n            <input\r\n              type=\"text\"\r\n              name=\"title\"\r\n              onChange={this.onChange}\r\n              value={this.state.title}\r\n            />\r\n          </div>\r\n          <br />\r\n          <div>\r\n            <label>Body: </label>\r\n            <br />\r\n            <textarea\r\n              name=\"body\"\r\n              onChange={this.onChange}\r\n              value={this.state.body}\r\n            />\r\n          </div>\r\n          <br />\r\n          <button type=\"submit\">Submit</button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nPostForm.propTypes = {\r\n  createPost: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default connect(null, { createPost })(PostForm);\r\n","import { FETCH_POSTS, NEW_POST } from \"../actions/types\";\r\n\r\nconst initialState = {\r\n  items: [],\r\n  item: {},\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n  switch (action.type) {\r\n    case FETCH_POSTS:\r\n      return {\r\n        ...state,\r\n        items: action.payload,\r\n      };\r\n    case NEW_POST:\r\n      return {\r\n        ...state,\r\n        item: action.payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport postReducer from \"./postReducer\";\r\n\r\nexport default combineReducers({\r\n  posts: postReducer,\r\n});\r\n","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport rootReducer from \"./reducers\";\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  initialState,\r\n  compose(\r\n    applyMiddleware(...middleware),\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n  )\r\n);\r\n\r\nexport default store;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { Provider } from \"react-redux\";\n\nimport Posts from \"./components/Posts\";\nimport PostForm from \"./components/Postform\";\n\nimport store from \"./store\";\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <div className=\"App\">\n          <PostForm />\n          <hr />\n          <Posts />\n        </div>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}